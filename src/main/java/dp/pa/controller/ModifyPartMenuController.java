package dp.pa.controller;

import dp.pa.model.InHouse;
import dp.pa.model.Inventory;
import dp.pa.model.Outsourced;
import dp.pa.model.Part;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.*;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

/** The controller for the Modify Part Menu of the GUI. */
public class ModifyPartMenuController extends BaseController {

    /**The part to be modified*/
    public static Part part;

    /**The button that indicates an InHouse part (see method OnInHouseSetPartTypeLabel)*/
    @FXML
    private RadioButton inHouseRBtn;

    /**The button that indicates an Outsourced part (see method OnOutsourcedSetPartTypeLabel)*/
    @FXML
    private RadioButton outsourcedRBtn;

    /**Label that displays either "Machine ID" or "Company Name" depending on part type selection*/
    @FXML
    private Label partTypeLabel;

    /**The field that displays the autogenerated unique part ID - disabled*/
    @FXML
    private TextField partIdTextField;

    /**Field for user to input part name*/
    @FXML
    private TextField nameTextField;

    /**Field for user to input part inv*/
    @FXML
    private TextField invTextField;

    /**Field for user to input part price*/
    @FXML
    private TextField priceTextField;

    /**Field for user to input part max inv*/
    @FXML
    private TextField maxTextField;

    /**Field for user to input part Machine ID (InHouse) or Company Name (Outsourced)*/
    @FXML
    private TextField typeTextField;

    /**Field for user to input part min inv*/
    @FXML
    private TextField minTextField;

    /**
     Populates the data fields with the current part data to be modified.
     Depending on part type, either sets Machine ID field (InHouse) or Company Name field (Outsourced).
     @param url the URL
     @param resourceBundle the ResourceBundle
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {

        // populate with part data
        partIdTextField.setText(String.valueOf(part.getId()));
        nameTextField.setText(part.getName());
        invTextField.setText(String.valueOf(part.getStock()));
        priceTextField.setText(String.valueOf(part.getPrice()));
        maxTextField.setText(String.valueOf(part.getMax()));
        minTextField.setText(String.valueOf(part.getMin()));

        // determine part type and call method for class-specific data
        if (part instanceof InHouse) {
            typeTextField.setText(String.valueOf(((InHouse) part).getMachineId()));
            inHouseRBtn.setSelected(true);
        } else {
            typeTextField.setText(((Outsourced) part).getCompanyName());
            outsourcedRBtn.setSelected(true);
        }
    }

    /**
     On click of Save button, saves the modified part to the Inventory and redirects user to main menu.
     Retrieves user input from the form to modify current part or create a new part object.
     Prevents invalid/empty data input and displays errors via dialog boxes.
     @param actionEvent the event that triggers the method
     @throws IOException exception
     */
    @FXML
    public void OnActionSavePartMainMenu(ActionEvent actionEvent) throws IOException {

        // set up alert box for multi-purpose checking
        Alert error = new Alert(Alert.AlertType.ERROR, "Please provide input for all fields.");
        error.setTitle("Empty Fields");

        // retrieve text field data
        int id = Integer.parseInt(partIdTextField.getText());
        String name = nameTextField.getText();
        String invStr = invTextField.getText();
        String priceStr = priceTextField.getText();
        String maxStr = maxTextField.getText();
        String minStr = minTextField.getText();
        String typeField = typeTextField.getText();

        // initialize variable for type conversion
        int inv;
        double price;
        int max;
        int min;

        // empty field check
        if (name.isBlank() || invStr.isBlank() || priceStr.isBlank() || maxStr.isBlank() || minStr.isBlank() || typeField.isBlank()) {
            error.showAndWait();
            return;
        }

        // type conversion
        error.setTitle("Invalid Entry");
        try {
            inv = Integer.parseInt(invStr);
            price = Double.parseDouble(priceStr);
            max = Integer.parseInt(maxStr);
            min = Integer.parseInt(minStr);
        } catch (NumberFormatException e) {
            error.setContentText("Inventory must be an integer\nPrice must be a double\nMin must be an integer\nMax must be an integer");
            error.showAndWait();
            return;
        }

        // logical check
        if (max < min | inv < min | inv > max) {
            error.setContentText("Max must be >= min\nInv must be >= min\nInv must be <= max");
            error.showAndWait();
            return;
        }
        // type check
        int machineID = 999;
        if (inHouseRBtn.isSelected()) {
            try {
                machineID = Integer.parseInt(typeField);
            } catch (NumberFormatException e) {
                error.setContentText("Machine ID must be an integer");
                error.showAndWait();
                return;
            }
        }

        // determine whether to modify current object or delete and create new object
        if ((part instanceof InHouse && inHouseRBtn.isSelected()) || (part instanceof Outsourced && outsourcedRBtn.isSelected())) {

            // part type not changed - no new object needed - modify in place
            part.setName(name);
            part.setPrice(price);
            part.setStock(inv);
            part.setMin(min);
            part.setMax(max);

            // set part-specific field
            if (part instanceof InHouse) {
                ((InHouse) part).setMachineId(machineID);
            }
            else {
                ((Outsourced) part).setCompanyName(typeField);
            }
        }
        else {      // part needs to be updated as a new part

            // get index of part
            int index = Inventory.getAllParts().indexOf(part);
            // determine which part type to create
            if (inHouseRBtn.isSelected()) {
                InHouse newPart = new InHouse(id, name, price, inv, min, max, machineID);
                Inventory.updatePart(index, newPart);
            }
            else {
                Outsourced newPart = new Outsourced(id, name, price, inv, min, max, typeField);
                Inventory.updatePart(index, newPart);
            }
        }

        // navigate to main menu
        this.goToMainMenu(actionEvent);
    }

    /**
     On click of button, redirects to the Main Menu.
     @param actionEvent the event that triggers the method
     @throws IOException exception
     */
    @FXML
    public void OnActionMainMenu(ActionEvent actionEvent) throws IOException {
        this.goToMainMenu(actionEvent);
    }

    /**
     On click of InHouse radio button, add Machine ID field to form.
     @param actionEvent the event that triggers the method.
     */
    @FXML
    public void OnInHouseSetPartTypeLabel(ActionEvent actionEvent) {
        partTypeLabel.setText("Machine ID");
    }

    /**
     On click of Outsourced radio button, add Company Name field to form.
     @param actionEvent the event that triggers the method.
     */
    @FXML
    public void OnOutsourcedSetPartLabelType(ActionEvent actionEvent) {
        partTypeLabel.setText("Company Name");
    }
}
